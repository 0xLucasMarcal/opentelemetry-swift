// Copyright 2020, OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// DO **NOT** EDIT. This file is automatically generated.

import Foundation

public enum ResourceConstants: String {
    /**
    Name of the cloud provider.

    ~~~
    // Examples
    attributes[.cloudProvider] = "gcp"
    ~~~

    - Requires: Value type should be `String`
    */
    case cloudProvider = "cloud.provider"
    /**
    The cloud account ID the resource is assigned to.

    ~~~
    // Examples
    attributes[.cloudAccountId] = "111111111111"
    attributes[.cloudAccountId] = "opentelemetry"
    ~~~

    - Requires: Value type should be `String`
    */
    case cloudAccountId = "cloud.account.id"
    /**
    The geographical region the resource is running. Refer to your provider's docs to see the available regions, for example [AWS regions](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/), [Azure regions](https://azure.microsoft.com/en-us/global-infrastructure/geographies/), or [Google Cloud regions](https://cloud.google.com/about/locations).

    ~~~
    // Examples
    attributes[.cloudRegion] = "us-central1"
    attributes[.cloudRegion] = "us-east-1"
    ~~~

    - Requires: Value type should be `String`
    */
    case cloudRegion = "cloud.region"
    /**
    Cloud regions often have multiple, isolated locations known as zones to increase availability. Availability zone represents the zone where the resource is running.

    ~~~
    // Examples
    attributes[.cloudAvailabilityZone] = "us-east-1c"
    ~~~

    - Note: Availability zones are called "zones" on Google Cloud.

    - Requires: Value type should be `String`
    */
    case cloudAvailabilityZone = "cloud.availability_zone"
    /**
    The cloud infrastructure resource in use.

    ~~~
    // Examples
    attributes[.cloudInfrastructureService] = "aws_ec2"
    attributes[.cloudInfrastructureService] = "azure_vm"
    attributes[.cloudInfrastructureService] = "gcp_compute_engine"
    ~~~

    - Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.

    - Requires: Value type should be `String`
    */
    case cloudInfrastructureService = "cloud.infrastructure_service"
    /**
    The Amazon Resource Name (ARN) of an [ECS container instance](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_instances.html).

    ~~~
    // Examples
    attributes[.awsEcsContainerArn] = "arn:aws:ecs:us-west-1:123456789123:container/32624152-9086-4f0e-acae-1a75b14fe4d9"
    ~~~

    - Requires: Value type should be `String`
    */
    case awsEcsContainerArn = "aws.ecs.container.arn"
    /**
    The ARN of an [ECS cluster](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html).

    ~~~
    // Examples
    attributes[.awsEcsClusterArn] = "arn:aws:ecs:us-west-2:123456789123:cluster/my-cluster"
    ~~~

    - Requires: Value type should be `String`
    */
    case awsEcsClusterArn = "aws.ecs.cluster.arn"
    /**
    The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.

    ~~~
    // Examples
    attributes[.awsEcsLaunchtype] = "ec2"
    attributes[.awsEcsLaunchtype] = "fargate"
    ~~~

    - Requires: Value type should be `String`
    */
    case awsEcsLaunchtype = "aws.ecs.launchtype"
    /**
    The ARN of an [ECS task definition](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html).

    ~~~
    // Examples
    attributes[.awsEcsTaskArn] = "arn:aws:ecs:us-west-1:123456789123:task/10838bed-421f-43ef-870a-f43feacbbb5b"
    ~~~

    - Requires: Value type should be `String`
    */
    case awsEcsTaskArn = "aws.ecs.task.arn"
    /**
    The task definition family this task definition is a member of.

    ~~~
    // Examples
    attributes[.awsEcsTaskFamily] = "opentelemetry-family"
    ~~~

    - Requires: Value type should be `String`
    */
    case awsEcsTaskFamily = "aws.ecs.task.family"
    /**
    The ARN of an EKS cluster.

    ~~~
    // Examples
    attributes[.awsEksClusterArn] = "arn:aws:ecs:us-west-2:123456789123:cluster/my-cluster"
    ~~~

    - Requires: Value type should be `String`
    */
    case awsEksClusterArn = "aws.eks.cluster.arn"
    /**
    The name(s) of the AWS log group(s) an application is writing to.

    ~~~
    // Examplesattributes[.awsLogGroupNames] = /aws/lambda/my-functionattributes[.awsLogGroupNames] = opentelemetry-service
    ~~~

    - Note: Multiple log groups must be supported for cases like multi-container applications, where a single application has sidecar containers, and each write to their own log group.

    - Requires: Value type should be `[String]`
    */
    case awsLogGroupNames = "aws.log.group.names"
    /**
    The Amazon Resource Name(s) (ARN) of the AWS log group(s).

    ~~~
    // Examplesattributes[.awsLogGroupArns] = arn:aws:logs:us-west-1:123456789012:log-group:/aws/my/group:*
    ~~~

    - Note: See the [log group ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format).

    - Requires: Value type should be `[String]`
    */
    case awsLogGroupArns = "aws.log.group.arns"
    /**
    The name(s) of the AWS log stream(s) an application is writing to.

    ~~~
    // Examplesattributes[.awsLogStreamNames] = logs/main/10838bed-421f-43ef-870a-f43feacbbb5b
    ~~~

    - Requires: Value type should be `[String]`
    */
    case awsLogStreamNames = "aws.log.stream.names"
    /**
    The ARN(s) of the AWS log stream(s).

    ~~~
    // Examplesattributes[.awsLogStreamArns] = arn:aws:logs:us-west-1:123456789012:log-group:/aws/my/group:log-stream:logs/main/10838bed-421f-43ef-870a-f43feacbbb5b
    ~~~

    - Note: See the [log stream ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format). One log group can contain several log streams, so these ARNs necessarily identify both a log group and a log stream.

    - Requires: Value type should be `[String]`
    */
    case awsLogStreamArns = "aws.log.stream.arns"
    /**
    Container name.

    ~~~
    // Examples
    attributes[.containerName] = "opentelemetry-autoconf"
    ~~~

    - Requires: Value type should be `String`
    */
    case containerName = "container.name"
    /**
    Container ID. Usually a UUID, as for example used to [identify Docker containers](https://docs.docker.com/engine/reference/run/#container-identification). The UUID might be abbreviated.

    ~~~
    // Examples
    attributes[.containerId] = "a3bf90e006b2"
    ~~~

    - Requires: Value type should be `String`
    */
    case containerId = "container.id"
    /**
    The container runtime managing this container.

    ~~~
    // Examples
    attributes[.containerRuntime] = "docker"
    attributes[.containerRuntime] = "containerd"
    attributes[.containerRuntime] = "rkt"
    ~~~

    - Requires: Value type should be `String`
    */
    case containerRuntime = "container.runtime"
    /**
    Name of the image the container was built on.

    ~~~
    // Examples
    attributes[.containerImageName] = "gcr.io/opentelemetry/operator"
    ~~~

    - Requires: Value type should be `String`
    */
    case containerImageName = "container.image.name"
    /**
    Container image tag.

    ~~~
    // Examples
    attributes[.containerImageTag] = "0.1"
    ~~~

    - Requires: Value type should be `String`
    */
    case containerImageTag = "container.image.tag"
    /**
    Name of the [deployment environment](https://en.wikipedia.org/wiki/Deployment_environment) (aka deployment tier).

    ~~~
    // Examples
    attributes[.deploymentEnvironment] = "staging"
    attributes[.deploymentEnvironment] = "production"
    ~~~

    - Requires: Value type should be `String`
    */
    case deploymentEnvironment = "deployment.environment"
    /**
    The name of the function being executed.

    ~~~
    // Examples
    attributes[.faasName] = "my-function"
    ~~~

    - Requires: Value type should be `String`
    */
    case faasName = "faas.name"
    /**
    The unique ID of the function being executed.

    ~~~
    // Examples
    attributes[.faasId] = "arn:aws:lambda:us-west-2:123456789012:function:my-function"
    ~~~

    - Note: For example, in AWS Lambda this field corresponds to the [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) value, in GCP to the URI of the resource, and in Azure to the [FunctionDirectory](https://github.com/Azure/azure-functions-host/wiki/Retrieving-information-about-the-currently-running-function) field.

    - Requires: Value type should be `String`
    */
    case faasId = "faas.id"
    /**
    The version string of the function being executed as defined in [Version Attributes](../../resource/semantic_conventions/README.md#version-attributes).

    ~~~
    // Examples
    attributes[.faasVersion] = "2.0.0"
    ~~~

    - Requires: Value type should be `String`
    */
    case faasVersion = "faas.version"
    /**
    The execution environment ID as a string.

    ~~~
    // Examples
    attributes[.faasInstance] = "my-function:instance-0001"
    ~~~

    - Requires: Value type should be `String`
    */
    case faasInstance = "faas.instance"
    /**
    The amount of memory available to the serverless function in MiB.

    ~~~
    // Examplesattributes[.faasMaxMemory] = 128
    ~~~

    - Note: It's recommended to set this attribute since e.g. too little memory can easily stop a Java AWS Lambda function from working correctly. On AWS Lambda, the environment variable `AWS_LAMBDA_FUNCTION_MEMORY_SIZE` provides this information.

    - Requires: Value type should be `Int`
    */
    case faasMaxMemory = "faas.max_memory"
    /**
    Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider.

    ~~~
    // Examples
    attributes[.hostId] = "opentelemetry-test"
    ~~~

    - Requires: Value type should be `String`
    */
    case hostId = "host.id"
    /**
    Name of the host. On Unix systems, it may contain what the hostname command returns, or the fully qualified hostname, or another name specified by the user.

    ~~~
    // Examples
    attributes[.hostName] = "opentelemetry-test"
    ~~~

    - Requires: Value type should be `String`
    */
    case hostName = "host.name"
    /**
    Type of host. For Cloud, this must be the machine type.

    ~~~
    // Examples
    attributes[.hostType] = "n1-standard-1"
    ~~~

    - Requires: Value type should be `String`
    */
    case hostType = "host.type"
    /**
    The CPU architecture the host system is running on.

    - Requires: Value type should be `String`
    */
    case hostArch = "host.arch"
    /**
    Name of the VM image or OS install the host was instantiated from.

    ~~~
    // Examples
    attributes[.hostImageName] = "infra-ami-eks-worker-node-7d4ec78312"
    attributes[.hostImageName] = "CentOS-8-x86_64-1905"
    ~~~

    - Requires: Value type should be `String`
    */
    case hostImageName = "host.image.name"
    /**
    VM image ID. For Cloud, this value is from the provider.

    ~~~
    // Examples
    attributes[.hostImageId] = "ami-07b06b442921831e5"
    ~~~

    - Requires: Value type should be `String`
    */
    case hostImageId = "host.image.id"
    /**
    The version string of the VM image as defined in [Version Attributes](README.md#version-attributes).

    ~~~
    // Examples
    attributes[.hostImageVersion] = "0.1"
    ~~~

    - Requires: Value type should be `String`
    */
    case hostImageVersion = "host.image.version"
    /**
    The name of the cluster.

    ~~~
    // Examples
    attributes[.k8sClusterName] = "opentelemetry-cluster"
    ~~~

    - Requires: Value type should be `String`
    */
    case k8sClusterName = "k8s.cluster.name"
    /**
    The name of the Node.

    ~~~
    // Examples
    attributes[.k8sNodeName] = "node-1"
    ~~~

    - Requires: Value type should be `String`
    */
    case k8sNodeName = "k8s.node.name"
    /**
    The UID of the Node.

    ~~~
    // Examples
    attributes[.k8sNodeUid] = "1eb3a0c6-0477-4080-a9cb-0cb7db65c6a2"
    ~~~

    - Requires: Value type should be `String`
    */
    case k8sNodeUid = "k8s.node.uid"
    /**
    The name of the namespace that the pod is running in.

    ~~~
    // Examples
    attributes[.k8sNamespaceName] = "default"
    ~~~

    - Requires: Value type should be `String`
    */
    case k8sNamespaceName = "k8s.namespace.name"
    /**
    The UID of the Pod.

    ~~~
    // Examples
    attributes[.k8sPodUid] = "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
    ~~~

    - Requires: Value type should be `String`
    */
    case k8sPodUid = "k8s.pod.uid"
    /**
    The name of the Pod.

    ~~~
    // Examples
    attributes[.k8sPodName] = "opentelemetry-pod-autoconf"
    ~~~

    - Requires: Value type should be `String`
    */
    case k8sPodName = "k8s.pod.name"
    /**
    The name of the Container in a Pod template.

    ~~~
    // Examples
    attributes[.k8sContainerName] = "redis"
    ~~~

    - Requires: Value type should be `String`
    */
    case k8sContainerName = "k8s.container.name"
    /**
    The UID of the ReplicaSet.

    ~~~
    // Examples
    attributes[.k8sReplicasetUid] = "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
    ~~~

    - Requires: Value type should be `String`
    */
    case k8sReplicasetUid = "k8s.replicaset.uid"
    /**
    The name of the ReplicaSet.

    ~~~
    // Examples
    attributes[.k8sReplicasetName] = "opentelemetry"
    ~~~

    - Requires: Value type should be `String`
    */
    case k8sReplicasetName = "k8s.replicaset.name"
    /**
    The UID of the Deployment.

    ~~~
    // Examples
    attributes[.k8sDeploymentUid] = "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
    ~~~

    - Requires: Value type should be `String`
    */
    case k8sDeploymentUid = "k8s.deployment.uid"
    /**
    The name of the Deployment.

    ~~~
    // Examples
    attributes[.k8sDeploymentName] = "opentelemetry"
    ~~~

    - Requires: Value type should be `String`
    */
    case k8sDeploymentName = "k8s.deployment.name"
    /**
    The UID of the StatefulSet.

    ~~~
    // Examples
    attributes[.k8sStatefulsetUid] = "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
    ~~~

    - Requires: Value type should be `String`
    */
    case k8sStatefulsetUid = "k8s.statefulset.uid"
    /**
    The name of the StatefulSet.

    ~~~
    // Examples
    attributes[.k8sStatefulsetName] = "opentelemetry"
    ~~~

    - Requires: Value type should be `String`
    */
    case k8sStatefulsetName = "k8s.statefulset.name"
    /**
    The UID of the DaemonSet.

    ~~~
    // Examples
    attributes[.k8sDaemonsetUid] = "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
    ~~~

    - Requires: Value type should be `String`
    */
    case k8sDaemonsetUid = "k8s.daemonset.uid"
    /**
    The name of the DaemonSet.

    ~~~
    // Examples
    attributes[.k8sDaemonsetName] = "opentelemetry"
    ~~~

    - Requires: Value type should be `String`
    */
    case k8sDaemonsetName = "k8s.daemonset.name"
    /**
    The UID of the Job.

    ~~~
    // Examples
    attributes[.k8sJobUid] = "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
    ~~~

    - Requires: Value type should be `String`
    */
    case k8sJobUid = "k8s.job.uid"
    /**
    The name of the Job.

    ~~~
    // Examples
    attributes[.k8sJobName] = "opentelemetry"
    ~~~

    - Requires: Value type should be `String`
    */
    case k8sJobName = "k8s.job.name"
    /**
    The UID of the CronJob.

    ~~~
    // Examples
    attributes[.k8sCronjobUid] = "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
    ~~~

    - Requires: Value type should be `String`
    */
    case k8sCronjobUid = "k8s.cronjob.uid"
    /**
    The name of the CronJob.

    ~~~
    // Examples
    attributes[.k8sCronjobName] = "opentelemetry"
    ~~~

    - Requires: Value type should be `String`
    */
    case k8sCronjobName = "k8s.cronjob.name"
    /**
    The operating system type.

    - Requires: Value type should be `String`
    */
    case osType = "os.type"
    /**
    Human readable (not intended to be parsed) OS version information, like e.g. reported by `ver` or `lsb_release -a` commands.

    ~~~
    // Examples
    attributes[.osDescription] = "Microsoft Windows [Version 10.0.18363.778]"
    attributes[.osDescription] = "Ubuntu 18.04.1 LTS"
    ~~~

    - Requires: Value type should be `String`
    */
    case osDescription = "os.description"
    /**
    Process identifier (PID).

    ~~~
    // Examplesattributes[.processPid] = 1234
    ~~~

    - Requires: Value type should be `Int`
    */
    case processPid = "process.pid"
    /**
    The name of the process executable. On Linux based systems, can be set to the `Name` in `proc/[pid]/status`. On Windows, can be set to the base name of `GetProcessImageFileNameW`.

    ~~~
    // Examples
    attributes[.processExecutableName] = "otelcol"
    ~~~

    - Requires: Value type should be `String`
    */
    case processExecutableName = "process.executable.name"
    /**
    The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.

    ~~~
    // Examples
    attributes[.processExecutablePath] = "/usr/bin/cmd/otelcol"
    ~~~

    - Requires: Value type should be `String`
    */
    case processExecutablePath = "process.executable.path"
    /**
    The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in `proc/[pid]/cmdline`. On Windows, can be set to the first parameter extracted from `GetCommandLineW`.

    ~~~
    // Examples
    attributes[.processCommand] = "cmd/otelcol"
    ~~~

    - Requires: Value type should be `String`
    */
    case processCommand = "process.command"
    /**
    The full command used to launch the process as a single string representing the full command. On Windows, can be set to the result of `GetCommandLineW`. Do not set this if you have to assemble it just for monitoring; use `process.command_args` instead.

    ~~~
    // Examples
    attributes[.processCommandLine] = "C:\cmd\otecol --config=\"my directory\config.yaml\""
    ~~~

    - Requires: Value type should be `String`
    */
    case processCommandLine = "process.command_line"
    /**
    All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`.

    ~~~
    // Examplesattributes[.processCommandArgs] = cmd/otecolattributes[.processCommandArgs] = --config=config.yaml
    ~~~

    - Requires: Value type should be `[String]`
    */
    case processCommandArgs = "process.command_args"
    /**
    The username of the user that owns the process.

    ~~~
    // Examples
    attributes[.processOwner] = "root"
    ~~~

    - Requires: Value type should be `String`
    */
    case processOwner = "process.owner"
    /**
    The name of the runtime of this process. For compiled native binaries, this SHOULD be the name of the compiler.

    ~~~
    // Examples
    attributes[.processRuntimeName] = "OpenJDK Runtime Environment"
    ~~~

    - Requires: Value type should be `String`
    */
    case processRuntimeName = "process.runtime.name"
    /**
    The version of the runtime of this process, as returned by the runtime without modification.

    ~~~
    // Examples
    attributes[.processRuntimeVersion] = "14.0.2"
    ~~~

    - Requires: Value type should be `String`
    */
    case processRuntimeVersion = "process.runtime.version"
    /**
    An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.

    ~~~
    // Examples
    attributes[.processRuntimeDescription] = "Eclipse OpenJ9 Eclipse OpenJ9 VM openj9-0.21.0"
    ~~~

    - Requires: Value type should be `String`
    */
    case processRuntimeDescription = "process.runtime.description"
    /**
    Logical name of the service.

    ~~~
    // Examples
    attributes[.serviceName] = "shoppingcart"
    ~~~

    - Note: MUST be the same for all instances of horizontally scaled services. If the value was not specified, SDKs MUST fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md#process), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value MUST be set to `unknown_service`.

    - Requires: Value type should be `String`
    */
    case serviceName = "service.name"
    /**
    A namespace for `service.name`.

    ~~~
    // Examples
    attributes[.serviceNamespace] = "Shop"
    ~~~

    - Note: A string value having a meaning that helps to distinguish a group of services, for example the team name that owns a group of services. `service.name` is expected to be unique within the same namespace. If `service.namespace` is not specified in the Resource then `service.name` is expected to be unique for all services that have no explicit namespace defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length namespace string is assumed equal to unspecified namespace.

    - Requires: Value type should be `String`
    */
    case serviceNamespace = "service.namespace"
    /**
    The string ID of the service instance.

    ~~~
    // Examples
    attributes[.serviceInstanceId] = "627cc493-f310-47de-96bd-71410b7dec09"
    ~~~

    - Note: MUST be unique for each instance of the same `service.namespace,service.name` pair (in other words `service.namespace,service.name,service.instance.id` triplet MUST be globally unique). The ID helps to distinguish instances of the same service that exist at the same time (e.g. instances of a horizontally scaled service). It is preferable for the ID to be persistent and stay the same for the lifetime of the service instance, however it is acceptable that the ID is ephemeral and changes during important lifetime events for the service (e.g. service restarts). If the service has no inherent unique ID that can be used as the value of this attribute it is recommended to generate a random Version 1 or Version 4 RFC 4122 UUID (services aiming for reproducible UUIDs may also use Version 5, see RFC 4122 for more recommendations).

    - Requires: Value type should be `String`
    */
    case serviceInstanceId = "service.instance.id"
    /**
    The version string of the service API or implementation.

    ~~~
    // Examples
    attributes[.serviceVersion] = "2.0.0"
    ~~~

    - Requires: Value type should be `String`
    */
    case serviceVersion = "service.version"
    /**
    The name of the telemetry SDK as defined above.

    ~~~
    // Examples
    attributes[.telemetrySdkName] = "opentelemetry"
    ~~~

    - Requires: Value type should be `String`
    */
    case telemetrySdkName = "telemetry.sdk.name"
    /**
    The language of the telemetry SDK.

    - Requires: Value type should be `String`
    */
    case telemetrySdkLanguage = "telemetry.sdk.language"
    /**
    The version string of the telemetry SDK.

    ~~~
    // Examples
    attributes[.telemetrySdkVersion] = "1.2.3"
    ~~~

    - Requires: Value type should be `String`
    */
    case telemetrySdkVersion = "telemetry.sdk.version"
    /**
    The version string of the auto instrumentation agent, if used.

    ~~~
    // Examples
    attributes[.telemetryAutoVersion] = "1.2.3"
    ~~~

    - Requires: Value type should be `String`
    */
    case telemetryAutoVersion = "telemetry.auto.version"
}
public func ==(left: ResourceConstants, right: String) -> Bool {
    return left.rawValue == right
}

public func ==(left: String, right: ResourceConstants) -> Bool {
    return left == right.rawValue
}

// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: opentelemetry/proto/logs/v1/logs.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020, OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Possible values for LogRecord.SeverityNumber.
public enum Opentelemetry_Proto_Logs_V1_SeverityNumber: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// UNSPECIFIED is the default SeverityNumber, it MUST NOT be used.
  case unspecified // = 0
  case trace // = 1
  case trace2 // = 2
  case trace3 // = 3
  case trace4 // = 4
  case debug // = 5
  case debug2 // = 6
  case debug3 // = 7
  case debug4 // = 8
  case info // = 9
  case info2 // = 10
  case info3 // = 11
  case info4 // = 12
  case warn // = 13
  case warn2 // = 14
  case warn3 // = 15
  case warn4 // = 16
  case error // = 17
  case error2 // = 18
  case error3 // = 19
  case error4 // = 20
  case fatal // = 21
  case fatal2 // = 22
  case fatal3 // = 23
  case fatal4 // = 24
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .trace
    case 2: self = .trace2
    case 3: self = .trace3
    case 4: self = .trace4
    case 5: self = .debug
    case 6: self = .debug2
    case 7: self = .debug3
    case 8: self = .debug4
    case 9: self = .info
    case 10: self = .info2
    case 11: self = .info3
    case 12: self = .info4
    case 13: self = .warn
    case 14: self = .warn2
    case 15: self = .warn3
    case 16: self = .warn4
    case 17: self = .error
    case 18: self = .error2
    case 19: self = .error3
    case 20: self = .error4
    case 21: self = .fatal
    case 22: self = .fatal2
    case 23: self = .fatal3
    case 24: self = .fatal4
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .trace: return 1
    case .trace2: return 2
    case .trace3: return 3
    case .trace4: return 4
    case .debug: return 5
    case .debug2: return 6
    case .debug3: return 7
    case .debug4: return 8
    case .info: return 9
    case .info2: return 10
    case .info3: return 11
    case .info4: return 12
    case .warn: return 13
    case .warn2: return 14
    case .warn3: return 15
    case .warn4: return 16
    case .error: return 17
    case .error2: return 18
    case .error3: return 19
    case .error4: return 20
    case .fatal: return 21
    case .fatal2: return 22
    case .fatal3: return 23
    case .fatal4: return 24
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Opentelemetry_Proto_Logs_V1_SeverityNumber: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Opentelemetry_Proto_Logs_V1_SeverityNumber] = [
    .unspecified,
    .trace,
    .trace2,
    .trace3,
    .trace4,
    .debug,
    .debug2,
    .debug3,
    .debug4,
    .info,
    .info2,
    .info3,
    .info4,
    .warn,
    .warn2,
    .warn3,
    .warn4,
    .error,
    .error2,
    .error3,
    .error4,
    .fatal,
    .fatal2,
    .fatal3,
    .fatal4,
  ]
}

#endif  // swift(>=4.2)

/// Masks for LogRecord.flags field.
public enum Opentelemetry_Proto_Logs_V1_LogRecordFlags: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case logRecordFlagUnspecified // = 0
  case logRecordFlagTraceFlagsMask // = 255
  case UNRECOGNIZED(Int)

  public init() {
    self = .logRecordFlagUnspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .logRecordFlagUnspecified
    case 255: self = .logRecordFlagTraceFlagsMask
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .logRecordFlagUnspecified: return 0
    case .logRecordFlagTraceFlagsMask: return 255
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Opentelemetry_Proto_Logs_V1_LogRecordFlags: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Opentelemetry_Proto_Logs_V1_LogRecordFlags] = [
    .logRecordFlagUnspecified,
    .logRecordFlagTraceFlagsMask,
  ]
}

#endif  // swift(>=4.2)

/// A collection of InstrumentationLibraryLogs from a Resource.
public struct Opentelemetry_Proto_Logs_V1_ResourceLogs {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The resource for the logs in this message.
  /// If this field is not set then resource info is unknown.
  public var resource: Opentelemetry_Proto_Resource_V1_Resource {
    get {return _storage._resource ?? Opentelemetry_Proto_Resource_V1_Resource()}
    set {_uniqueStorage()._resource = newValue}
  }
  /// Returns true if `resource` has been explicitly set.
  public var hasResource: Bool {return _storage._resource != nil}
  /// Clears the value of `resource`. Subsequent reads from it will return its default value.
  public mutating func clearResource() {_uniqueStorage()._resource = nil}

  /// A list of InstrumentationLibraryLogs that originate from a resource.
  public var instrumentationLibraryLogs: [Opentelemetry_Proto_Logs_V1_InstrumentationLibraryLogs] {
    get {return _storage._instrumentationLibraryLogs}
    set {_uniqueStorage()._instrumentationLibraryLogs = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// A collection of Logs produced by an InstrumentationLibrary.
public struct Opentelemetry_Proto_Logs_V1_InstrumentationLibraryLogs {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The instrumentation library information for the logs in this message.
  /// Semantically when InstrumentationLibrary isn't set, it is equivalent with
  /// an empty instrumentation library name (unknown).
  public var instrumentationLibrary: Opentelemetry_Proto_Common_V1_InstrumentationLibrary {
    get {return _storage._instrumentationLibrary ?? Opentelemetry_Proto_Common_V1_InstrumentationLibrary()}
    set {_uniqueStorage()._instrumentationLibrary = newValue}
  }
  /// Returns true if `instrumentationLibrary` has been explicitly set.
  public var hasInstrumentationLibrary: Bool {return _storage._instrumentationLibrary != nil}
  /// Clears the value of `instrumentationLibrary`. Subsequent reads from it will return its default value.
  public mutating func clearInstrumentationLibrary() {_uniqueStorage()._instrumentationLibrary = nil}

  /// A list of log records.
  public var logs: [Opentelemetry_Proto_Logs_V1_LogRecord] {
    get {return _storage._logs}
    set {_uniqueStorage()._logs = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// A log record according to OpenTelemetry Log Data Model:
/// https://github.com/open-telemetry/oteps/blob/master/text/logs/0097-log-data-model.md
public struct Opentelemetry_Proto_Logs_V1_LogRecord {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// time_unix_nano is the time when the event occurred.
  /// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
  /// Value of 0 indicates unknown or missing timestamp.
  public var timeUnixNano: UInt64 {
    get {return _storage._timeUnixNano}
    set {_uniqueStorage()._timeUnixNano = newValue}
  }

  /// Numerical value of the severity, normalized to values described in Log Data Model.
  /// [Optional].
  public var severityNumber: Opentelemetry_Proto_Logs_V1_SeverityNumber {
    get {return _storage._severityNumber}
    set {_uniqueStorage()._severityNumber = newValue}
  }

  /// The severity text (also known as log level). The original string representation as
  /// it is known at the source. [Optional].
  public var severityText: String {
    get {return _storage._severityText}
    set {_uniqueStorage()._severityText = newValue}
  }

  /// Short event identifier that does not contain varying parts. Name describes
  /// what happened (e.g. "ProcessStarted"). Recommended to be no longer than 50
  /// characters. Not guaranteed to be unique in any way. [Optional].
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// A value containing the body of the log record. Can be for example a human-readable
  /// string message (including multi-line) describing the event in a free form or it can
  /// be a structured data composed of arrays and maps of other values. [Optional].
  public var body: Opentelemetry_Proto_Common_V1_AnyValue {
    get {return _storage._body ?? Opentelemetry_Proto_Common_V1_AnyValue()}
    set {_uniqueStorage()._body = newValue}
  }
  /// Returns true if `body` has been explicitly set.
  public var hasBody: Bool {return _storage._body != nil}
  /// Clears the value of `body`. Subsequent reads from it will return its default value.
  public mutating func clearBody() {_uniqueStorage()._body = nil}

  /// Additional attributes that describe the specific event occurrence. [Optional].
  public var attributes: [Opentelemetry_Proto_Common_V1_KeyValue] {
    get {return _storage._attributes}
    set {_uniqueStorage()._attributes = newValue}
  }

  public var droppedAttributesCount: UInt32 {
    get {return _storage._droppedAttributesCount}
    set {_uniqueStorage()._droppedAttributesCount = newValue}
  }

  /// Flags, a bit field. 8 least significant bits are the trace flags as
  /// defined in W3C Trace Context specification. 24 most significant bits are reserved
  /// and must be set to 0. Readers must not assume that 24 most significant bits
  /// will be zero and must correctly mask the bits when reading 8-bit trace flag (use
  /// flags & TRACE_FLAGS_MASK). [Optional].
  public var flags: UInt32 {
    get {return _storage._flags}
    set {_uniqueStorage()._flags = newValue}
  }

  /// A unique identifier for a trace. All logs from the same trace share
  /// the same `trace_id`. The ID is a 16-byte array. An ID with all zeroes
  /// is considered invalid. Can be set for logs that are part of request processing
  /// and have an assigned trace id. [Optional].
  public var traceID: Data {
    get {return _storage._traceID}
    set {_uniqueStorage()._traceID = newValue}
  }

  /// A unique identifier for a span within a trace, assigned when the span
  /// is created. The ID is an 8-byte array. An ID with all zeroes is considered
  /// invalid. Can be set for logs that are part of a particular processing span.
  /// If span_id is present trace_id SHOULD be also present. [Optional].
  public var spanID: Data {
    get {return _storage._spanID}
    set {_uniqueStorage()._spanID = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "opentelemetry.proto.logs.v1"

extension Opentelemetry_Proto_Logs_V1_SeverityNumber: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SEVERITY_NUMBER_UNSPECIFIED"),
    1: .same(proto: "SEVERITY_NUMBER_TRACE"),
    2: .same(proto: "SEVERITY_NUMBER_TRACE2"),
    3: .same(proto: "SEVERITY_NUMBER_TRACE3"),
    4: .same(proto: "SEVERITY_NUMBER_TRACE4"),
    5: .same(proto: "SEVERITY_NUMBER_DEBUG"),
    6: .same(proto: "SEVERITY_NUMBER_DEBUG2"),
    7: .same(proto: "SEVERITY_NUMBER_DEBUG3"),
    8: .same(proto: "SEVERITY_NUMBER_DEBUG4"),
    9: .same(proto: "SEVERITY_NUMBER_INFO"),
    10: .same(proto: "SEVERITY_NUMBER_INFO2"),
    11: .same(proto: "SEVERITY_NUMBER_INFO3"),
    12: .same(proto: "SEVERITY_NUMBER_INFO4"),
    13: .same(proto: "SEVERITY_NUMBER_WARN"),
    14: .same(proto: "SEVERITY_NUMBER_WARN2"),
    15: .same(proto: "SEVERITY_NUMBER_WARN3"),
    16: .same(proto: "SEVERITY_NUMBER_WARN4"),
    17: .same(proto: "SEVERITY_NUMBER_ERROR"),
    18: .same(proto: "SEVERITY_NUMBER_ERROR2"),
    19: .same(proto: "SEVERITY_NUMBER_ERROR3"),
    20: .same(proto: "SEVERITY_NUMBER_ERROR4"),
    21: .same(proto: "SEVERITY_NUMBER_FATAL"),
    22: .same(proto: "SEVERITY_NUMBER_FATAL2"),
    23: .same(proto: "SEVERITY_NUMBER_FATAL3"),
    24: .same(proto: "SEVERITY_NUMBER_FATAL4"),
  ]
}

extension Opentelemetry_Proto_Logs_V1_LogRecordFlags: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LOG_RECORD_FLAG_UNSPECIFIED"),
    255: .same(proto: "LOG_RECORD_FLAG_TRACE_FLAGS_MASK"),
  ]
}

extension Opentelemetry_Proto_Logs_V1_ResourceLogs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ResourceLogs"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "resource"),
    2: .standard(proto: "instrumentation_library_logs"),
  ]

  fileprivate class _StorageClass {
    var _resource: Opentelemetry_Proto_Resource_V1_Resource? = nil
    var _instrumentationLibraryLogs: [Opentelemetry_Proto_Logs_V1_InstrumentationLibraryLogs] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _resource = source._resource
      _instrumentationLibraryLogs = source._instrumentationLibraryLogs
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._resource)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._instrumentationLibraryLogs)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._resource {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._instrumentationLibraryLogs.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._instrumentationLibraryLogs, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Opentelemetry_Proto_Logs_V1_ResourceLogs, rhs: Opentelemetry_Proto_Logs_V1_ResourceLogs) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._resource != rhs_storage._resource {return false}
        if _storage._instrumentationLibraryLogs != rhs_storage._instrumentationLibraryLogs {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Opentelemetry_Proto_Logs_V1_InstrumentationLibraryLogs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InstrumentationLibraryLogs"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "instrumentation_library"),
    2: .same(proto: "logs"),
  ]

  fileprivate class _StorageClass {
    var _instrumentationLibrary: Opentelemetry_Proto_Common_V1_InstrumentationLibrary? = nil
    var _logs: [Opentelemetry_Proto_Logs_V1_LogRecord] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _instrumentationLibrary = source._instrumentationLibrary
      _logs = source._logs
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._instrumentationLibrary)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._logs)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._instrumentationLibrary {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._logs.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._logs, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Opentelemetry_Proto_Logs_V1_InstrumentationLibraryLogs, rhs: Opentelemetry_Proto_Logs_V1_InstrumentationLibraryLogs) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._instrumentationLibrary != rhs_storage._instrumentationLibrary {return false}
        if _storage._logs != rhs_storage._logs {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Opentelemetry_Proto_Logs_V1_LogRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LogRecord"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "time_unix_nano"),
    2: .standard(proto: "severity_number"),
    3: .standard(proto: "severity_text"),
    4: .same(proto: "name"),
    5: .same(proto: "body"),
    6: .same(proto: "attributes"),
    7: .standard(proto: "dropped_attributes_count"),
    8: .same(proto: "flags"),
    9: .standard(proto: "trace_id"),
    10: .standard(proto: "span_id"),
  ]

  fileprivate class _StorageClass {
    var _timeUnixNano: UInt64 = 0
    var _severityNumber: Opentelemetry_Proto_Logs_V1_SeverityNumber = .unspecified
    var _severityText: String = String()
    var _name: String = String()
    var _body: Opentelemetry_Proto_Common_V1_AnyValue? = nil
    var _attributes: [Opentelemetry_Proto_Common_V1_KeyValue] = []
    var _droppedAttributesCount: UInt32 = 0
    var _flags: UInt32 = 0
    var _traceID: Data = SwiftProtobuf.Internal.emptyData
    var _spanID: Data = SwiftProtobuf.Internal.emptyData

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _timeUnixNano = source._timeUnixNano
      _severityNumber = source._severityNumber
      _severityText = source._severityText
      _name = source._name
      _body = source._body
      _attributes = source._attributes
      _droppedAttributesCount = source._droppedAttributesCount
      _flags = source._flags
      _traceID = source._traceID
      _spanID = source._spanID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularFixed64Field(value: &_storage._timeUnixNano)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._severityNumber)
        case 3: try decoder.decodeSingularStringField(value: &_storage._severityText)
        case 4: try decoder.decodeSingularStringField(value: &_storage._name)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._body)
        case 6: try decoder.decodeRepeatedMessageField(value: &_storage._attributes)
        case 7: try decoder.decodeSingularUInt32Field(value: &_storage._droppedAttributesCount)
        case 8: try decoder.decodeSingularFixed32Field(value: &_storage._flags)
        case 9: try decoder.decodeSingularBytesField(value: &_storage._traceID)
        case 10: try decoder.decodeSingularBytesField(value: &_storage._spanID)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._timeUnixNano != 0 {
        try visitor.visitSingularFixed64Field(value: _storage._timeUnixNano, fieldNumber: 1)
      }
      if _storage._severityNumber != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._severityNumber, fieldNumber: 2)
      }
      if !_storage._severityText.isEmpty {
        try visitor.visitSingularStringField(value: _storage._severityText, fieldNumber: 3)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 4)
      }
      if let v = _storage._body {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if !_storage._attributes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._attributes, fieldNumber: 6)
      }
      if _storage._droppedAttributesCount != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._droppedAttributesCount, fieldNumber: 7)
      }
      if _storage._flags != 0 {
        try visitor.visitSingularFixed32Field(value: _storage._flags, fieldNumber: 8)
      }
      if !_storage._traceID.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._traceID, fieldNumber: 9)
      }
      if !_storage._spanID.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._spanID, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Opentelemetry_Proto_Logs_V1_LogRecord, rhs: Opentelemetry_Proto_Logs_V1_LogRecord) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._timeUnixNano != rhs_storage._timeUnixNano {return false}
        if _storage._severityNumber != rhs_storage._severityNumber {return false}
        if _storage._severityText != rhs_storage._severityText {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._body != rhs_storage._body {return false}
        if _storage._attributes != rhs_storage._attributes {return false}
        if _storage._droppedAttributesCount != rhs_storage._droppedAttributesCount {return false}
        if _storage._flags != rhs_storage._flags {return false}
        if _storage._traceID != rhs_storage._traceID {return false}
        if _storage._spanID != rhs_storage._spanID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
